import argparse # handles CLI arguments
import json # handles working with JSON data
import re # handles working with Regex
from faker import Faker # handles working with Faker's library of fake data

generated = Faker() # Instance for Faker to generate data
parser = argparse.ArgumentParser() # Parser to read CLI arguments

parser.add_argument("--count", "-c", type=int, default=5) # Records to generate
parser.add_argument("--output", "-o", type=str) # Optional output file
parser.add_argument("--format", "-f", type=str, choices=["json"], default="json") # Format of output (default: json)
parser.add_argument("--schema", "-s", type=str) # Optional schema file to define field structure
parser.add_argument("--fields", type=str, help="name,dob,pid,ip,verified,Priority") # Optional comma-separated list of fields
parser.add_argument("--highlight-new-users", action="store_true") # Optional flag to enable PID check

arguments = parser.parse_args() # Parses user provided arguments

field_filler = { # (dictionary) Defines what each field should be generating
    "name": "name",
    "dob": "date",
    "pid": "number",
    "ip": "ip",
    "verified": "boolean",
    "priority": ["Urgent", "High", "Medium", "Low"]
}

schema = { # Default schema if no file or fields are provided in CLI
    "name": "name",
    "dob": "date",
    "pid": "number",
    "ip": "ip",
    "verified": "boolean",
    "Priority": ["Urgent", "High", "Medium", "Low"]
}

if arguments.schema: # only If user provides file, replace default schema with the provided file
    with open(arguments.schema, "r") as f:
        schema = json.load(f)

if arguments.fields: # If user includes --fields, ensure schema only uses stated fields instead of every field
    fields_list = [field.strip().lower() for field in arguments.fields.split(",")] # separate fields by commas, remove spaces, and convert to lowercase
    schema = {} # reset schema
    for field in fields_list: # for each field provided by user
        if field in field_filler: # check if field is in field_filler
            schema[field] = field_filler[field] # Add field name/type to new schema
        else:
            print(f"The '{field}' field is not an option.")

def record_generation(schema): # function to generate fake record from schema
    record = {} # start with empty dictionary
    for field_name, field_type in schema.items(): # loop through each schema field and type
        if isinstance(field_type, list): # if type is from a list
            record[field_name] = generated.random_element(elements=field_type) # choose randomly from list
        else:
            if field_type == "name": # if field type is name
                record[field_name] = generated.name() # generate a name, and so on
            elif field_type == "date":
                record[field_name] = str(generated.date_of_birth())
            elif field_type == "number":
                record[field_name] = str(generated.random_int(min=0, max=999999)).zfill(6)
            elif field_type == "ip":
                record[field_name] = generated.ipv4()
            elif field_type == "boolean":
                record[field_name] = generated.boolean()
            else:
                record[field_name] = None

 
    if arguments.highlight_new_users: # if flag is used
        pid_value = record.get("pid", "") #receive pid or not
        if re.match(r"^9\d{5}$", pid_value): # if pid is present and starts with 9
            name = record.get("name", "") # get name from record or not
            if name:
                print(f"New User! PID: {pid_value}, Name: {name}") # Message displayed with name
            else:
                print(f"New User! PID: {pid_value}") # Message displayed without name

    return record # Return generated record after message

records_list = [] # generates mutliple records, this is the list to hold records
for i in range(arguments.count): # inputted count amount, generates x amount of records
    records_list.append(record_generation(schema)) # Adds records to list

if arguments.output: # Print to output file
    with open(arguments.output, "w") as f: #Opens file to write to
        f.write(json.dumps(records_list, indent=2)) # JSON is written neatly to file
else: # Or, print JSON to terminal
    print(json.dumps(records_list, indent=2))
